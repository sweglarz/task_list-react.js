{"version":3,"sources":["globalStyles.js","features/tasks/Buttons/styled.js","features/tasks/tasksSlice.js","features/tasks/Buttons/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledButtons","styled","div","Button","button","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasks","Buttons","useSelector","dispatch","useDispatch","length","onClick","some","disabled","every","Main","main","Container","children","FormElement","form","FormLabel","label","FormInput","input","FormButton","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","content","trim","nanoid","current","focus","ref","value","className","type","placeholder","onChange","target","Title","h1","Header","title","SectionElement","section","HeaderBox","SectionHeader","h2","Section","extraHeaderContent","body","List","ul","Item","li","hidden","css","TaskContent","span","toggleDone","remove","TaskList","map","task","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.e40833f8.chunk.js","sourcesContent":["import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: #eee;\r\n    }\r\n`","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    padding: 10px;\r\n    line-height: 1.5;\r\n    \r\n    @media(max-width: 500px){\r\n        display: flex;\r\n        flex-direction: column;\r\n        text-align: center;\r\n    };\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    font-family: 'Montserrat', sans-serif;\r\n    border: none;\r\n    color: teal;\r\n    font-size: 16px;\r\n    padding: 0;\r\n    margin: 0 0 0 20px;\r\n    cursor: pointer;\r\n    transition: color 0.3s;\r\n\r\n    &:hover{\r\n        color: rgb(1, 160, 160);\r\n    };\r\n    &:active{\r\n        color: rgb(0, 196, 196);\r\n    };\r\n    &:disabled{\r\n        color: #ccc;\r\n        cursor: inherit;\r\n    };\r\n    @media(max-width: 500px){\r\n        margin: 10px 0;\r\n    };\r\n`;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1)\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n    },\r\n});\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import { StyledButtons, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\n\r\nconst Buttons = () => {\r\n    const {tasks, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <StyledButtons>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {tasks.some(({ done }) => done) && hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </StyledButtons>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 900px;\r\n    margin: 100px auto;\r\n    padding: 10px;\r\n`;\r\n","import { Main } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container","import styled from \"styled-components\";\r\n\r\nexport const FormElement = styled.form`\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const FormLabel = styled.label`\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    @media (max-width: 500px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n    padding: 10px;\r\n    margin: 10px;\r\n    flex-grow: 1;\r\n    font-size: 16px;\r\n    border: 2px solid #eee;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    padding: 10px;\r\n    margin: 10px;\r\n    background-color: teal;\r\n    color: #fff;\r\n    border: none;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n\r\n    &:hover{\r\n        background-color: rgb(1, 141, 141);\r\n        transform: scale(1.1);\r\n    };\r\n    &:active{\r\n        background-color: rgb(3, 170, 170); \r\n    };\r\n    @media (max-width: 500px) {\r\n        flex-basis: 100%;\r\n    };\r\n`;\r\n","import { useState, useRef } from \"react\";\r\nimport { FormElement, FormLabel, FormInput, FormButton } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent === \"\") {\r\n      inputRef.current.focus();\r\n      return\r\n    };\r\n\r\n    dispatch(addTask({\r\n      content: newTaskContent.trim(),\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n    \r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <FormElement onSubmit={onFormSubmit}>\r\n      <FormLabel>\r\n        <FormInput\r\n          ref={inputRef}\r\n          value={newTaskContent}\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          placeholder=\"Co jest do zrobienia?\"\r\n          onChange={({ target }) => setNewTaskContent(target.value)}\r\n        />\r\n        <FormButton>Dodaj zadanie</FormButton>\r\n      </FormLabel>\r\n    </FormElement>\r\n  )\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n    margin: 10px 10px 20px;\r\n`;\r\n","import { Title } from \"./styled\";\r\n\r\nconst Header = ({title}) => (\r\n    <Title>{title}</Title>\r\n)\r\n\r\nexport default Header; ","import styled from \"styled-components\";\r\n\r\nexport const SectionElement = styled.section`\r\n    background-color: #fff;\r\n    padding: 5px 0;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const HeaderBox = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    border-bottom: 2px solid #eee;\r\n    \r\n    @media(max-width: 500px){\r\n        display: flex;\r\n        flex-direction: column;\r\n    };\r\n`;\r\n\r\nexport const SectionHeader = styled.h2`\r\n    margin: 0px;\r\n    padding: 10px;\r\n    font-size: 20px;\r\n`;\r\n","import { SectionElement, HeaderBox, SectionHeader} from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <SectionElement>\r\n        <HeaderBox>\r\n            <SectionHeader>{title}</SectionHeader>\r\n            {extraHeaderContent}\r\n        </HeaderBox>\r\n        {body}\r\n    </SectionElement>\r\n);\r\n\r\nexport default Section;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    text-align: left;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 10px 0;\r\n    border-bottom: 2px solid #eee;\r\n    margin: 25px 15px 0 15px;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;    \r\n    `};\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    line-height: 1.8;\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin: 0 10px;\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: #008000;\r\n        color: #fff;\r\n\r\n        &:hover{\r\n            background-color: rgb(0, 138, 0);\r\n        };\r\n        &:active{\r\n            background-color: rgb(3, 158, 3);\r\n        };\r\n    `};\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: #ff0000;\r\n        color: #fff;\r\n\r\n        &:hover{\r\n            background-color: rgb(255, 52, 52);\r\n        };\r\n        &:active{\r\n            background-color: rgb(255, 72, 72);\r\n        };\r\n    `};\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, TaskContent, Button } from \"./styled\";\r\n\r\n\r\nconst TaskList = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks)\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        toggleDone\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n\r\n                    <TaskContent\r\n                        done={task.done}\r\n                    >\r\n                        {task.content}\r\n                    </TaskContent>\r\n                    <Button\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import Buttons from \"./Buttons\";\nimport Container from \"../../common/Container\";\nimport Form from \"./Form\";\nimport Header from \"../../common/Header\";\nimport Section from \"../../common/Section\";\nimport TaskList from \"./TaskList\";\n\n\nfunction Tasks() {\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header\n          title=\"Lista zadań\"\n        />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={\n            <Form />\n          }\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={\n            <TaskList />\n          }\n          extraHeaderContent={\n            <Buttons />\n          }\n        />\n      </Container>\n    </div>\n  );\n};\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\"\r\n\r\nconst App = () => <Tasks/>;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from \"./globalStyles\";\nimport { Provider } from 'react-redux';\nimport App from \"./App\"\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}